// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"bosh-dns/dns/server/record"
	"sync"
)

type RecordManager struct {
	FilterStub        func(aliasExpansions []string, shouldTrack bool) ([]record.Record, error)
	filterMutex       sync.RWMutex
	filterArgsForCall []struct {
		aliasExpansions []string
		shouldTrack     bool
	}
	filterReturns struct {
		result1 []record.Record
		result2 error
	}
	filterReturnsOnCall map[int]struct {
		result1 []record.Record
		result2 error
	}
	AllRecordsStub        func() *[]record.Record
	allRecordsMutex       sync.RWMutex
	allRecordsArgsForCall []struct{}
	allRecordsReturns     struct {
		result1 *[]record.Record
	}
	allRecordsReturnsOnCall map[int]struct {
		result1 *[]record.Record
	}
	ExpandAliasesStub        func(fqdn string) []string
	expandAliasesMutex       sync.RWMutex
	expandAliasesArgsForCall []struct {
		fqdn string
	}
	expandAliasesReturns struct {
		result1 []string
	}
	expandAliasesReturnsOnCall map[int]struct {
		result1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RecordManager) Filter(aliasExpansions []string, shouldTrack bool) ([]record.Record, error) {
	var aliasExpansionsCopy []string
	if aliasExpansions != nil {
		aliasExpansionsCopy = make([]string, len(aliasExpansions))
		copy(aliasExpansionsCopy, aliasExpansions)
	}
	fake.filterMutex.Lock()
	ret, specificReturn := fake.filterReturnsOnCall[len(fake.filterArgsForCall)]
	fake.filterArgsForCall = append(fake.filterArgsForCall, struct {
		aliasExpansions []string
		shouldTrack     bool
	}{aliasExpansionsCopy, shouldTrack})
	fake.recordInvocation("Filter", []interface{}{aliasExpansionsCopy, shouldTrack})
	fake.filterMutex.Unlock()
	if fake.FilterStub != nil {
		return fake.FilterStub(aliasExpansions, shouldTrack)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.filterReturns.result1, fake.filterReturns.result2
}

func (fake *RecordManager) FilterCallCount() int {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	return len(fake.filterArgsForCall)
}

func (fake *RecordManager) FilterArgsForCall(i int) ([]string, bool) {
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	return fake.filterArgsForCall[i].aliasExpansions, fake.filterArgsForCall[i].shouldTrack
}

func (fake *RecordManager) FilterReturns(result1 []record.Record, result2 error) {
	fake.FilterStub = nil
	fake.filterReturns = struct {
		result1 []record.Record
		result2 error
	}{result1, result2}
}

func (fake *RecordManager) FilterReturnsOnCall(i int, result1 []record.Record, result2 error) {
	fake.FilterStub = nil
	if fake.filterReturnsOnCall == nil {
		fake.filterReturnsOnCall = make(map[int]struct {
			result1 []record.Record
			result2 error
		})
	}
	fake.filterReturnsOnCall[i] = struct {
		result1 []record.Record
		result2 error
	}{result1, result2}
}

func (fake *RecordManager) AllRecords() *[]record.Record {
	fake.allRecordsMutex.Lock()
	ret, specificReturn := fake.allRecordsReturnsOnCall[len(fake.allRecordsArgsForCall)]
	fake.allRecordsArgsForCall = append(fake.allRecordsArgsForCall, struct{}{})
	fake.recordInvocation("AllRecords", []interface{}{})
	fake.allRecordsMutex.Unlock()
	if fake.AllRecordsStub != nil {
		return fake.AllRecordsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.allRecordsReturns.result1
}

func (fake *RecordManager) AllRecordsCallCount() int {
	fake.allRecordsMutex.RLock()
	defer fake.allRecordsMutex.RUnlock()
	return len(fake.allRecordsArgsForCall)
}

func (fake *RecordManager) AllRecordsReturns(result1 *[]record.Record) {
	fake.AllRecordsStub = nil
	fake.allRecordsReturns = struct {
		result1 *[]record.Record
	}{result1}
}

func (fake *RecordManager) AllRecordsReturnsOnCall(i int, result1 *[]record.Record) {
	fake.AllRecordsStub = nil
	if fake.allRecordsReturnsOnCall == nil {
		fake.allRecordsReturnsOnCall = make(map[int]struct {
			result1 *[]record.Record
		})
	}
	fake.allRecordsReturnsOnCall[i] = struct {
		result1 *[]record.Record
	}{result1}
}

func (fake *RecordManager) ExpandAliases(fqdn string) []string {
	fake.expandAliasesMutex.Lock()
	ret, specificReturn := fake.expandAliasesReturnsOnCall[len(fake.expandAliasesArgsForCall)]
	fake.expandAliasesArgsForCall = append(fake.expandAliasesArgsForCall, struct {
		fqdn string
	}{fqdn})
	fake.recordInvocation("ExpandAliases", []interface{}{fqdn})
	fake.expandAliasesMutex.Unlock()
	if fake.ExpandAliasesStub != nil {
		return fake.ExpandAliasesStub(fqdn)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.expandAliasesReturns.result1
}

func (fake *RecordManager) ExpandAliasesCallCount() int {
	fake.expandAliasesMutex.RLock()
	defer fake.expandAliasesMutex.RUnlock()
	return len(fake.expandAliasesArgsForCall)
}

func (fake *RecordManager) ExpandAliasesArgsForCall(i int) string {
	fake.expandAliasesMutex.RLock()
	defer fake.expandAliasesMutex.RUnlock()
	return fake.expandAliasesArgsForCall[i].fqdn
}

func (fake *RecordManager) ExpandAliasesReturns(result1 []string) {
	fake.ExpandAliasesStub = nil
	fake.expandAliasesReturns = struct {
		result1 []string
	}{result1}
}

func (fake *RecordManager) ExpandAliasesReturnsOnCall(i int, result1 []string) {
	fake.ExpandAliasesStub = nil
	if fake.expandAliasesReturnsOnCall == nil {
		fake.expandAliasesReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.expandAliasesReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *RecordManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.filterMutex.RLock()
	defer fake.filterMutex.RUnlock()
	fake.allRecordsMutex.RLock()
	defer fake.allRecordsMutex.RUnlock()
	fake.expandAliasesMutex.RLock()
	defer fake.expandAliasesMutex.RUnlock()
	return fake.invocations
}

func (fake *RecordManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

// Code generated by counterfeiter. DO NOT EDIT.
package managerfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-utils/system"
)

type FakeCmdRunner struct {
	RunComplexCommandStub        func(cmd system.Command) (stdout, stderr string, exitStatus int, err error)
	runComplexCommandMutex       sync.RWMutex
	runComplexCommandArgsForCall []struct {
		cmd system.Command
	}
	runComplexCommandReturns struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}
	runComplexCommandReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}
	RunComplexCommandAsyncStub        func(cmd system.Command) (system.Process, error)
	runComplexCommandAsyncMutex       sync.RWMutex
	runComplexCommandAsyncArgsForCall []struct {
		cmd system.Command
	}
	runComplexCommandAsyncReturns struct {
		result1 system.Process
		result2 error
	}
	runComplexCommandAsyncReturnsOnCall map[int]struct {
		result1 system.Process
		result2 error
	}
	RunCommandStub        func(cmdName string, args ...string) (stdout, stderr string, exitStatus int, err error)
	runCommandMutex       sync.RWMutex
	runCommandArgsForCall []struct {
		cmdName string
		args    []string
	}
	runCommandReturns struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}
	runCommandReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}
	RunCommandQuietlyStub        func(cmdName string, args ...string) (stdout, stderr string, exitStatus int, err error)
	runCommandQuietlyMutex       sync.RWMutex
	runCommandQuietlyArgsForCall []struct {
		cmdName string
		args    []string
	}
	runCommandQuietlyReturns struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}
	runCommandQuietlyReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}
	RunCommandWithInputStub        func(input, cmdName string, args ...string) (stdout, stderr string, exitStatus int, err error)
	runCommandWithInputMutex       sync.RWMutex
	runCommandWithInputArgsForCall []struct {
		input   string
		cmdName string
		args    []string
	}
	runCommandWithInputReturns struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}
	runCommandWithInputReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}
	CommandExistsStub        func(cmdName string) (exists bool)
	commandExistsMutex       sync.RWMutex
	commandExistsArgsForCall []struct {
		cmdName string
	}
	commandExistsReturns struct {
		result1 bool
	}
	commandExistsReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCmdRunner) RunComplexCommand(cmd system.Command) (stdout, stderr string, exitStatus int, err error) {
	fake.runComplexCommandMutex.Lock()
	ret, specificReturn := fake.runComplexCommandReturnsOnCall[len(fake.runComplexCommandArgsForCall)]
	fake.runComplexCommandArgsForCall = append(fake.runComplexCommandArgsForCall, struct {
		cmd system.Command
	}{cmd})
	fake.recordInvocation("RunComplexCommand", []interface{}{cmd})
	fake.runComplexCommandMutex.Unlock()
	if fake.RunComplexCommandStub != nil {
		return fake.RunComplexCommandStub(cmd)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fake.runComplexCommandReturns.result1, fake.runComplexCommandReturns.result2, fake.runComplexCommandReturns.result3, fake.runComplexCommandReturns.result4
}

func (fake *FakeCmdRunner) RunComplexCommandCallCount() int {
	fake.runComplexCommandMutex.RLock()
	defer fake.runComplexCommandMutex.RUnlock()
	return len(fake.runComplexCommandArgsForCall)
}

func (fake *FakeCmdRunner) RunComplexCommandArgsForCall(i int) system.Command {
	fake.runComplexCommandMutex.RLock()
	defer fake.runComplexCommandMutex.RUnlock()
	return fake.runComplexCommandArgsForCall[i].cmd
}

func (fake *FakeCmdRunner) RunComplexCommandReturns(result1 string, result2 string, result3 int, result4 error) {
	fake.RunComplexCommandStub = nil
	fake.runComplexCommandReturns = struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeCmdRunner) RunComplexCommandReturnsOnCall(i int, result1 string, result2 string, result3 int, result4 error) {
	fake.RunComplexCommandStub = nil
	if fake.runComplexCommandReturnsOnCall == nil {
		fake.runComplexCommandReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 int
			result4 error
		})
	}
	fake.runComplexCommandReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeCmdRunner) RunComplexCommandAsync(cmd system.Command) (system.Process, error) {
	fake.runComplexCommandAsyncMutex.Lock()
	ret, specificReturn := fake.runComplexCommandAsyncReturnsOnCall[len(fake.runComplexCommandAsyncArgsForCall)]
	fake.runComplexCommandAsyncArgsForCall = append(fake.runComplexCommandAsyncArgsForCall, struct {
		cmd system.Command
	}{cmd})
	fake.recordInvocation("RunComplexCommandAsync", []interface{}{cmd})
	fake.runComplexCommandAsyncMutex.Unlock()
	if fake.RunComplexCommandAsyncStub != nil {
		return fake.RunComplexCommandAsyncStub(cmd)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.runComplexCommandAsyncReturns.result1, fake.runComplexCommandAsyncReturns.result2
}

func (fake *FakeCmdRunner) RunComplexCommandAsyncCallCount() int {
	fake.runComplexCommandAsyncMutex.RLock()
	defer fake.runComplexCommandAsyncMutex.RUnlock()
	return len(fake.runComplexCommandAsyncArgsForCall)
}

func (fake *FakeCmdRunner) RunComplexCommandAsyncArgsForCall(i int) system.Command {
	fake.runComplexCommandAsyncMutex.RLock()
	defer fake.runComplexCommandAsyncMutex.RUnlock()
	return fake.runComplexCommandAsyncArgsForCall[i].cmd
}

func (fake *FakeCmdRunner) RunComplexCommandAsyncReturns(result1 system.Process, result2 error) {
	fake.RunComplexCommandAsyncStub = nil
	fake.runComplexCommandAsyncReturns = struct {
		result1 system.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeCmdRunner) RunComplexCommandAsyncReturnsOnCall(i int, result1 system.Process, result2 error) {
	fake.RunComplexCommandAsyncStub = nil
	if fake.runComplexCommandAsyncReturnsOnCall == nil {
		fake.runComplexCommandAsyncReturnsOnCall = make(map[int]struct {
			result1 system.Process
			result2 error
		})
	}
	fake.runComplexCommandAsyncReturnsOnCall[i] = struct {
		result1 system.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeCmdRunner) RunCommand(cmdName string, args ...string) (stdout, stderr string, exitStatus int, err error) {
	fake.runCommandMutex.Lock()
	ret, specificReturn := fake.runCommandReturnsOnCall[len(fake.runCommandArgsForCall)]
	fake.runCommandArgsForCall = append(fake.runCommandArgsForCall, struct {
		cmdName string
		args    []string
	}{cmdName, args})
	fake.recordInvocation("RunCommand", []interface{}{cmdName, args})
	fake.runCommandMutex.Unlock()
	if fake.RunCommandStub != nil {
		return fake.RunCommandStub(cmdName, args...)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fake.runCommandReturns.result1, fake.runCommandReturns.result2, fake.runCommandReturns.result3, fake.runCommandReturns.result4
}

func (fake *FakeCmdRunner) RunCommandCallCount() int {
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	return len(fake.runCommandArgsForCall)
}

func (fake *FakeCmdRunner) RunCommandArgsForCall(i int) (string, []string) {
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	return fake.runCommandArgsForCall[i].cmdName, fake.runCommandArgsForCall[i].args
}

func (fake *FakeCmdRunner) RunCommandReturns(result1 string, result2 string, result3 int, result4 error) {
	fake.RunCommandStub = nil
	fake.runCommandReturns = struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeCmdRunner) RunCommandReturnsOnCall(i int, result1 string, result2 string, result3 int, result4 error) {
	fake.RunCommandStub = nil
	if fake.runCommandReturnsOnCall == nil {
		fake.runCommandReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 int
			result4 error
		})
	}
	fake.runCommandReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeCmdRunner) RunCommandQuietly(cmdName string, args ...string) (stdout, stderr string, exitStatus int, err error) {
	fake.runCommandQuietlyMutex.Lock()
	ret, specificReturn := fake.runCommandQuietlyReturnsOnCall[len(fake.runCommandQuietlyArgsForCall)]
	fake.runCommandQuietlyArgsForCall = append(fake.runCommandQuietlyArgsForCall, struct {
		cmdName string
		args    []string
	}{cmdName, args})
	fake.recordInvocation("RunCommandQuietly", []interface{}{cmdName, args})
	fake.runCommandQuietlyMutex.Unlock()
	if fake.RunCommandQuietlyStub != nil {
		return fake.RunCommandQuietlyStub(cmdName, args...)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fake.runCommandQuietlyReturns.result1, fake.runCommandQuietlyReturns.result2, fake.runCommandQuietlyReturns.result3, fake.runCommandQuietlyReturns.result4
}

func (fake *FakeCmdRunner) RunCommandQuietlyCallCount() int {
	fake.runCommandQuietlyMutex.RLock()
	defer fake.runCommandQuietlyMutex.RUnlock()
	return len(fake.runCommandQuietlyArgsForCall)
}

func (fake *FakeCmdRunner) RunCommandQuietlyArgsForCall(i int) (string, []string) {
	fake.runCommandQuietlyMutex.RLock()
	defer fake.runCommandQuietlyMutex.RUnlock()
	return fake.runCommandQuietlyArgsForCall[i].cmdName, fake.runCommandQuietlyArgsForCall[i].args
}

func (fake *FakeCmdRunner) RunCommandQuietlyReturns(result1 string, result2 string, result3 int, result4 error) {
	fake.RunCommandQuietlyStub = nil
	fake.runCommandQuietlyReturns = struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeCmdRunner) RunCommandQuietlyReturnsOnCall(i int, result1 string, result2 string, result3 int, result4 error) {
	fake.RunCommandQuietlyStub = nil
	if fake.runCommandQuietlyReturnsOnCall == nil {
		fake.runCommandQuietlyReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 int
			result4 error
		})
	}
	fake.runCommandQuietlyReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeCmdRunner) RunCommandWithInput(input string, cmdName string, args ...string) (stdout, stderr string, exitStatus int, err error) {
	fake.runCommandWithInputMutex.Lock()
	ret, specificReturn := fake.runCommandWithInputReturnsOnCall[len(fake.runCommandWithInputArgsForCall)]
	fake.runCommandWithInputArgsForCall = append(fake.runCommandWithInputArgsForCall, struct {
		input   string
		cmdName string
		args    []string
	}{input, cmdName, args})
	fake.recordInvocation("RunCommandWithInput", []interface{}{input, cmdName, args})
	fake.runCommandWithInputMutex.Unlock()
	if fake.RunCommandWithInputStub != nil {
		return fake.RunCommandWithInputStub(input, cmdName, args...)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fake.runCommandWithInputReturns.result1, fake.runCommandWithInputReturns.result2, fake.runCommandWithInputReturns.result3, fake.runCommandWithInputReturns.result4
}

func (fake *FakeCmdRunner) RunCommandWithInputCallCount() int {
	fake.runCommandWithInputMutex.RLock()
	defer fake.runCommandWithInputMutex.RUnlock()
	return len(fake.runCommandWithInputArgsForCall)
}

func (fake *FakeCmdRunner) RunCommandWithInputArgsForCall(i int) (string, string, []string) {
	fake.runCommandWithInputMutex.RLock()
	defer fake.runCommandWithInputMutex.RUnlock()
	return fake.runCommandWithInputArgsForCall[i].input, fake.runCommandWithInputArgsForCall[i].cmdName, fake.runCommandWithInputArgsForCall[i].args
}

func (fake *FakeCmdRunner) RunCommandWithInputReturns(result1 string, result2 string, result3 int, result4 error) {
	fake.RunCommandWithInputStub = nil
	fake.runCommandWithInputReturns = struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeCmdRunner) RunCommandWithInputReturnsOnCall(i int, result1 string, result2 string, result3 int, result4 error) {
	fake.RunCommandWithInputStub = nil
	if fake.runCommandWithInputReturnsOnCall == nil {
		fake.runCommandWithInputReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 int
			result4 error
		})
	}
	fake.runCommandWithInputReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeCmdRunner) CommandExists(cmdName string) (exists bool) {
	fake.commandExistsMutex.Lock()
	ret, specificReturn := fake.commandExistsReturnsOnCall[len(fake.commandExistsArgsForCall)]
	fake.commandExistsArgsForCall = append(fake.commandExistsArgsForCall, struct {
		cmdName string
	}{cmdName})
	fake.recordInvocation("CommandExists", []interface{}{cmdName})
	fake.commandExistsMutex.Unlock()
	if fake.CommandExistsStub != nil {
		return fake.CommandExistsStub(cmdName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.commandExistsReturns.result1
}

func (fake *FakeCmdRunner) CommandExistsCallCount() int {
	fake.commandExistsMutex.RLock()
	defer fake.commandExistsMutex.RUnlock()
	return len(fake.commandExistsArgsForCall)
}

func (fake *FakeCmdRunner) CommandExistsArgsForCall(i int) string {
	fake.commandExistsMutex.RLock()
	defer fake.commandExistsMutex.RUnlock()
	return fake.commandExistsArgsForCall[i].cmdName
}

func (fake *FakeCmdRunner) CommandExistsReturns(result1 bool) {
	fake.CommandExistsStub = nil
	fake.commandExistsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeCmdRunner) CommandExistsReturnsOnCall(i int, result1 bool) {
	fake.CommandExistsStub = nil
	if fake.commandExistsReturnsOnCall == nil {
		fake.commandExistsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.commandExistsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeCmdRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runComplexCommandMutex.RLock()
	defer fake.runComplexCommandMutex.RUnlock()
	fake.runComplexCommandAsyncMutex.RLock()
	defer fake.runComplexCommandAsyncMutex.RUnlock()
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	fake.runCommandQuietlyMutex.RLock()
	defer fake.runCommandQuietlyMutex.RUnlock()
	fake.runCommandWithInputMutex.RLock()
	defer fake.runCommandWithInputMutex.RUnlock()
	fake.commandExistsMutex.RLock()
	defer fake.commandExistsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCmdRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ system.CmdRunner = new(FakeCmdRunner)

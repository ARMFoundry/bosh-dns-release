// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"bosh-dns/dns/server/handlers"
	"sync"
)

type FakeIPProvider struct {
	HasIPStub        func(string) bool
	hasIPMutex       sync.RWMutex
	hasIPArgsForCall []struct {
		arg1 string
	}
	hasIPReturns struct {
		result1 bool
	}
	hasIPReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIPProvider) HasIP(arg1 string) bool {
	fake.hasIPMutex.Lock()
	ret, specificReturn := fake.hasIPReturnsOnCall[len(fake.hasIPArgsForCall)]
	fake.hasIPArgsForCall = append(fake.hasIPArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("HasIP", []interface{}{arg1})
	fake.hasIPMutex.Unlock()
	if fake.HasIPStub != nil {
		return fake.HasIPStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.hasIPReturns.result1
}

func (fake *FakeIPProvider) HasIPCallCount() int {
	fake.hasIPMutex.RLock()
	defer fake.hasIPMutex.RUnlock()
	return len(fake.hasIPArgsForCall)
}

func (fake *FakeIPProvider) HasIPArgsForCall(i int) string {
	fake.hasIPMutex.RLock()
	defer fake.hasIPMutex.RUnlock()
	return fake.hasIPArgsForCall[i].arg1
}

func (fake *FakeIPProvider) HasIPReturns(result1 bool) {
	fake.HasIPStub = nil
	fake.hasIPReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIPProvider) HasIPReturnsOnCall(i int, result1 bool) {
	fake.HasIPStub = nil
	if fake.hasIPReturnsOnCall == nil {
		fake.hasIPReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasIPReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIPProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.hasIPMutex.RLock()
	defer fake.hasIPMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeIPProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.IPProvider = new(FakeIPProvider)

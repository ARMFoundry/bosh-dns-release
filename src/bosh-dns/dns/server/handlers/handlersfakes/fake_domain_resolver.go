// This file was generated by counterfeiter
package handlersfakes

import (
	"bosh-dns/dns/server/handlers"
	"sync"

	"github.com/miekg/dns"
)

type FakeDomainResolver struct {
	ResolveStub        func(questionDomains []string, responseWriter dns.ResponseWriter, requestMsg *dns.Msg) *dns.Msg
	resolveMutex       sync.RWMutex
	resolveArgsForCall []struct {
		questionDomains []string
		responseWriter  dns.ResponseWriter
		requestMsg      *dns.Msg
	}
	resolveReturns struct {
		result1 *dns.Msg
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDomainResolver) Resolve(questionDomains []string, responseWriter dns.ResponseWriter, requestMsg *dns.Msg) *dns.Msg {
	var questionDomainsCopy []string
	if questionDomains != nil {
		questionDomainsCopy = make([]string, len(questionDomains))
		copy(questionDomainsCopy, questionDomains)
	}
	fake.resolveMutex.Lock()
	fake.resolveArgsForCall = append(fake.resolveArgsForCall, struct {
		questionDomains []string
		responseWriter  dns.ResponseWriter
		requestMsg      *dns.Msg
	}{questionDomainsCopy, responseWriter, requestMsg})
	fake.recordInvocation("Resolve", []interface{}{questionDomainsCopy, responseWriter, requestMsg})
	fake.resolveMutex.Unlock()
	if fake.ResolveStub != nil {
		return fake.ResolveStub(questionDomains, responseWriter, requestMsg)
	} else {
		return fake.resolveReturns.result1
	}
}

func (fake *FakeDomainResolver) ResolveCallCount() int {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return len(fake.resolveArgsForCall)
}

func (fake *FakeDomainResolver) ResolveArgsForCall(i int) ([]string, dns.ResponseWriter, *dns.Msg) {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return fake.resolveArgsForCall[i].questionDomains, fake.resolveArgsForCall[i].responseWriter, fake.resolveArgsForCall[i].requestMsg
}

func (fake *FakeDomainResolver) ResolveReturns(result1 *dns.Msg) {
	fake.ResolveStub = nil
	fake.resolveReturns = struct {
		result1 *dns.Msg
	}{result1}
}

func (fake *FakeDomainResolver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDomainResolver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.DomainResolver = new(FakeDomainResolver)

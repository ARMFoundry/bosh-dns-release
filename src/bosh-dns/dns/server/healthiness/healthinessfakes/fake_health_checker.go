// This file was generated by counterfeiter
package healthinessfakes

import (
	"bosh-dns/dns/server/healthiness"
	"sync"
)

type FakeHealthChecker struct {
	GetStatusStub        func(ip string) bool
	getStatusMutex       sync.RWMutex
	getStatusArgsForCall []struct {
		ip string
	}
	getStatusReturns struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHealthChecker) GetStatus(ip string) bool {
	fake.getStatusMutex.Lock()
	fake.getStatusArgsForCall = append(fake.getStatusArgsForCall, struct {
		ip string
	}{ip})
	fake.recordInvocation("GetStatus", []interface{}{ip})
	fake.getStatusMutex.Unlock()
	if fake.GetStatusStub != nil {
		return fake.GetStatusStub(ip)
	} else {
		return fake.getStatusReturns.result1
	}
}

func (fake *FakeHealthChecker) GetStatusCallCount() int {
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	return len(fake.getStatusArgsForCall)
}

func (fake *FakeHealthChecker) GetStatusArgsForCall(i int) string {
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	return fake.getStatusArgsForCall[i].ip
}

func (fake *FakeHealthChecker) GetStatusReturns(result1 bool) {
	fake.GetStatusStub = nil
	fake.getStatusReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeHealthChecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getStatusMutex.RLock()
	defer fake.getStatusMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHealthChecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ healthiness.HealthChecker = new(FakeHealthChecker)

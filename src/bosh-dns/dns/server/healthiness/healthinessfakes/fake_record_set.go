// Code generated by counterfeiter. DO NOT EDIT.
package healthinessfakes

import (
	"bosh-dns/dns/server/healthiness"
	"sync"
)

type FakeRecordSet struct {
	ResolveStub        func(domain string) ([]string, error)
	resolveMutex       sync.RWMutex
	resolveArgsForCall []struct {
		domain string
	}
	resolveReturns struct {
		result1 []string
		result2 error
	}
	resolveReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	SubscribeStub        func() <-chan bool
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct{}
	subscribeReturns     struct {
		result1 <-chan bool
	}
	subscribeReturnsOnCall map[int]struct {
		result1 <-chan bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRecordSet) Resolve(domain string) ([]string, error) {
	fake.resolveMutex.Lock()
	ret, specificReturn := fake.resolveReturnsOnCall[len(fake.resolveArgsForCall)]
	fake.resolveArgsForCall = append(fake.resolveArgsForCall, struct {
		domain string
	}{domain})
	fake.recordInvocation("Resolve", []interface{}{domain})
	fake.resolveMutex.Unlock()
	if fake.ResolveStub != nil {
		return fake.ResolveStub(domain)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.resolveReturns.result1, fake.resolveReturns.result2
}

func (fake *FakeRecordSet) ResolveCallCount() int {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return len(fake.resolveArgsForCall)
}

func (fake *FakeRecordSet) ResolveArgsForCall(i int) string {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return fake.resolveArgsForCall[i].domain
}

func (fake *FakeRecordSet) ResolveReturns(result1 []string, result2 error) {
	fake.ResolveStub = nil
	fake.resolveReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeRecordSet) ResolveReturnsOnCall(i int, result1 []string, result2 error) {
	fake.ResolveStub = nil
	if fake.resolveReturnsOnCall == nil {
		fake.resolveReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.resolveReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeRecordSet) Subscribe() <-chan bool {
	fake.subscribeMutex.Lock()
	ret, specificReturn := fake.subscribeReturnsOnCall[len(fake.subscribeArgsForCall)]
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct{}{})
	fake.recordInvocation("Subscribe", []interface{}{})
	fake.subscribeMutex.Unlock()
	if fake.SubscribeStub != nil {
		return fake.SubscribeStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.subscribeReturns.result1
}

func (fake *FakeRecordSet) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *FakeRecordSet) SubscribeReturns(result1 <-chan bool) {
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 <-chan bool
	}{result1}
}

func (fake *FakeRecordSet) SubscribeReturnsOnCall(i int, result1 <-chan bool) {
	fake.SubscribeStub = nil
	if fake.subscribeReturnsOnCall == nil {
		fake.subscribeReturnsOnCall = make(map[int]struct {
			result1 <-chan bool
		})
	}
	fake.subscribeReturnsOnCall[i] = struct {
		result1 <-chan bool
	}{result1}
}

func (fake *FakeRecordSet) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRecordSet) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ healthiness.RecordSet = new(FakeRecordSet)

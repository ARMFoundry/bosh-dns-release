// This file was generated by counterfeiter
package serverfakes

import (
	"bosh-dns/dns/server"
	"sync"
)

type FakeUpcheck struct {
	IsUpStub        func() error
	isUpMutex       sync.RWMutex
	isUpArgsForCall []struct{}
	isUpReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpcheck) IsUp() error {
	fake.isUpMutex.Lock()
	fake.isUpArgsForCall = append(fake.isUpArgsForCall, struct{}{})
	fake.recordInvocation("IsUp", []interface{}{})
	fake.isUpMutex.Unlock()
	if fake.IsUpStub != nil {
		return fake.IsUpStub()
	} else {
		return fake.isUpReturns.result1
	}
}

func (fake *FakeUpcheck) IsUpCallCount() int {
	fake.isUpMutex.RLock()
	defer fake.isUpMutex.RUnlock()
	return len(fake.isUpArgsForCall)
}

func (fake *FakeUpcheck) IsUpReturns(result1 error) {
	fake.IsUpStub = nil
	fake.isUpReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpcheck) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isUpMutex.RLock()
	defer fake.isUpMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeUpcheck) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.Upcheck = new(FakeUpcheck)

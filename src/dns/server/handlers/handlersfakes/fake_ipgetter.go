// This file was generated by counterfeiter
package handlersfakes

import (
	"sync"

	"github.com/cloudfoundry/dns-release/src/dns/server/handlers"
)

type FakeIPGetter struct {
	GetIPsStub        func(string) ([]string, error)
	getIPsMutex       sync.RWMutex
	getIPsArgsForCall []struct {
		arg1 string
	}
	getIPsReturns struct {
		result1 []string
		result2 error
	}
	getIPsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIPGetter) GetIPs(arg1 string) ([]string, error) {
	fake.getIPsMutex.Lock()
	ret, specificReturn := fake.getIPsReturnsOnCall[len(fake.getIPsArgsForCall)]
	fake.getIPsArgsForCall = append(fake.getIPsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetIPs", []interface{}{arg1})
	fake.getIPsMutex.Unlock()
	if fake.GetIPsStub != nil {
		return fake.GetIPsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getIPsReturns.result1, fake.getIPsReturns.result2
}

func (fake *FakeIPGetter) GetIPsCallCount() int {
	fake.getIPsMutex.RLock()
	defer fake.getIPsMutex.RUnlock()
	return len(fake.getIPsArgsForCall)
}

func (fake *FakeIPGetter) GetIPsArgsForCall(i int) string {
	fake.getIPsMutex.RLock()
	defer fake.getIPsMutex.RUnlock()
	return fake.getIPsArgsForCall[i].arg1
}

func (fake *FakeIPGetter) GetIPsReturns(result1 []string, result2 error) {
	fake.GetIPsStub = nil
	fake.getIPsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeIPGetter) GetIPsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.GetIPsStub = nil
	if fake.getIPsReturnsOnCall == nil {
		fake.getIPsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getIPsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeIPGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getIPsMutex.RLock()
	defer fake.getIPsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeIPGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.IPGetter = new(FakeIPGetter)

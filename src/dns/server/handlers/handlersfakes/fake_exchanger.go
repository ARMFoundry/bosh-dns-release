// This file was generated by counterfeiter
package handlersfakes

import (
	"dns/server/handlers"
	"sync"
	"time"

	"github.com/miekg/dns"
)

type FakeExchanger struct {
	ExchangeStub        func(*dns.Msg, string) (*dns.Msg, time.Duration, error)
	exchangeMutex       sync.RWMutex
	exchangeArgsForCall []struct {
		arg1 *dns.Msg
		arg2 string
	}
	exchangeReturns struct {
		result1 *dns.Msg
		result2 time.Duration
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExchanger) Exchange(arg1 *dns.Msg, arg2 string) (*dns.Msg, time.Duration, error) {
	fake.exchangeMutex.Lock()
	fake.exchangeArgsForCall = append(fake.exchangeArgsForCall, struct {
		arg1 *dns.Msg
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Exchange", []interface{}{arg1, arg2})
	fake.exchangeMutex.Unlock()
	if fake.ExchangeStub != nil {
		return fake.ExchangeStub(arg1, arg2)
	} else {
		return fake.exchangeReturns.result1, fake.exchangeReturns.result2, fake.exchangeReturns.result3
	}
}

func (fake *FakeExchanger) ExchangeCallCount() int {
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	return len(fake.exchangeArgsForCall)
}

func (fake *FakeExchanger) ExchangeArgsForCall(i int) (*dns.Msg, string) {
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	return fake.exchangeArgsForCall[i].arg1, fake.exchangeArgsForCall[i].arg2
}

func (fake *FakeExchanger) ExchangeReturns(result1 *dns.Msg, result2 time.Duration, result3 error) {
	fake.ExchangeStub = nil
	fake.exchangeReturns = struct {
		result1 *dns.Msg
		result2 time.Duration
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeExchanger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exchangeMutex.RLock()
	defer fake.exchangeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeExchanger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.Exchanger = new(FakeExchanger)

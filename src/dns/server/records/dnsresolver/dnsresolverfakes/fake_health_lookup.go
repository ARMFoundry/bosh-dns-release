// This file was generated by counterfeiter
package dnsresolverfakes

import (
	"dns/server/records/dnsresolver"
	"sync"
)

type FakeHealthLookup struct {
	IsHealthyStub        func(ip string) bool
	isHealthyMutex       sync.RWMutex
	isHealthyArgsForCall []struct {
		ip string
	}
	isHealthyReturns struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHealthLookup) IsHealthy(ip string) bool {
	fake.isHealthyMutex.Lock()
	fake.isHealthyArgsForCall = append(fake.isHealthyArgsForCall, struct {
		ip string
	}{ip})
	fake.recordInvocation("IsHealthy", []interface{}{ip})
	fake.isHealthyMutex.Unlock()
	if fake.IsHealthyStub != nil {
		return fake.IsHealthyStub(ip)
	} else {
		return fake.isHealthyReturns.result1
	}
}

func (fake *FakeHealthLookup) IsHealthyCallCount() int {
	fake.isHealthyMutex.RLock()
	defer fake.isHealthyMutex.RUnlock()
	return len(fake.isHealthyArgsForCall)
}

func (fake *FakeHealthLookup) IsHealthyArgsForCall(i int) string {
	fake.isHealthyMutex.RLock()
	defer fake.isHealthyMutex.RUnlock()
	return fake.isHealthyArgsForCall[i].ip
}

func (fake *FakeHealthLookup) IsHealthyReturns(result1 bool) {
	fake.IsHealthyStub = nil
	fake.isHealthyReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeHealthLookup) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isHealthyMutex.RLock()
	defer fake.isHealthyMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHealthLookup) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dnsresolver.HealthLookup = new(FakeHealthLookup)

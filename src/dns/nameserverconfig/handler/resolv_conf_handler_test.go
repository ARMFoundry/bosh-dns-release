package handler_test

import (
	. "github.com/cloudfoundry/dns-release/src/dns/nameserverconfig/handler"

	"errors"
	"fmt"
	boshsysfakes "github.com/cloudfoundry/bosh-utils/system/fakes"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("ResolvConfCheck", func() {
	var (
		resolvConfCheck  ResolvConfHandler
		fakeFileSystem   *boshsysfakes.FakeFileSystem
		correctAddress   string = "192.0.2.100"
		incorrectAddress string = "192.0.2.222"
	)

	BeforeEach(func() {
		fakeFileSystem = boshsysfakes.NewFakeFileSystem()
		resolvConfCheck = NewResolvConfHandler(correctAddress, fakeFileSystem)
	})

	Describe("ApplyConfig", func() {
		It("errors if filesystem fails", func() {
			fakeFileSystem.WriteFileError = errors.New("fake-err1")

			err := resolvConfCheck.Apply()
			Expect(err).To(HaveOccurred())
			Expect(err.Error()).To(ContainSubstring("Writing "))
			Expect(err.Error()).To(ContainSubstring("fake-err1"))
		})

		It("updates /etc/resolv.conf with our DNS server", func() {
			err := resolvConfCheck.Apply()
			Expect(err).NotTo(HaveOccurred())

			expectedString := fmt.Sprintf(`# This file is automatically generated and overwritten by bosh-dns
nameserver %s
`, correctAddress)

			contents, err := fakeFileSystem.ReadFileString("/etc/resolv.conf")
			Expect(err).NotTo(HaveOccurred())
			Expect(contents).To(Equal(expectedString))
		})
	})

	Describe("IsCorrect", func() {
		BeforeEach(func() {
			err := fakeFileSystem.WriteFile("/etc/resolv.conf", []byte(fmt.Sprintf(`
nameserver %s
`, correctAddress)))

			Expect(err).NotTo(HaveOccurred())
		})

		It("errors when resolv.conf cannot be read", func() {
			fakeFileSystem.ReadFileError = errors.New("fake-err1")

			_, err := resolvConfCheck.IsCorrect()
			Expect(err).To(HaveOccurred())
			Expect(err.Error()).To(ContainSubstring("Reading "))
			Expect(err.Error()).To(ContainSubstring("fake-err1"))
		})

		It("detects when resolv.conf is invalid", func() {
			resolvConfCheck = NewResolvConfHandler(incorrectAddress, fakeFileSystem)

			res, err := resolvConfCheck.IsCorrect()
			Expect(err).ToNot(HaveOccurred())
			Expect(res).To(Equal(false))
		})

		It("detects when resolv.conf is valid", func() {
			res, err := resolvConfCheck.IsCorrect()
			Expect(err).ToNot(HaveOccurred())
			Expect(res).To(Equal(true))
		})

		It("detects when resolv.conf has our DNS address as the first entry", func() {
			err := fakeFileSystem.WriteFile("/etc/resolv.conf", []byte(fmt.Sprintf(`
nameserver %s
nameserver %s
`, incorrectAddress, correctAddress)))

			Expect(err).NotTo(HaveOccurred())

			res, err := resolvConfCheck.IsCorrect()
			Expect(err).ToNot(HaveOccurred())
			Expect(res).To(Equal(false))
		})
	})
})

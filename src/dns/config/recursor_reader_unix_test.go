// +build linux darwin

package config_test

import (
	. "github.com/cloudfoundry/dns-release/src/dns/config"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	boshsysfakes "github.com/cloudfoundry/bosh-utils/system/fakes"
	"fmt"
	"errors"
)

var _ = Describe("RecursorReaderLinux", func() {
	var resolvConfRecursorReader ResolvConfRecursorReader
	var dnsServerDomainName string
	var loopbackAddress string
	var fs *boshsysfakes.FakeFileSystem

	BeforeEach(func() {
		dnsServerDomainName = "dns-server-hostname"
		loopbackAddress = "127.0.0.1"
	})

	Context("When resolv.conf is empty", func() {
		BeforeEach(func() {
			fs = boshsysfakes.NewFakeFileSystem()
			resolvConfRecursorReader = NewResolvConfRecursorReader(fs, dnsServerDomainName)

			fs.WriteFile("/etc/resolv.conf", []byte(""))
		})
		It("returns an empty array", func() {
			recursors, err := resolvConfRecursorReader.Get()

			Expect(err).ToNot(HaveOccurred())
			Expect(recursors).To(HaveLen(0))
		})
	})

	Context("When resolv.conf has only the DNS server address & loopback address", func() {

		BeforeEach(func() {
			fs = boshsysfakes.NewFakeFileSystem()
			resolvConfRecursorReader = NewResolvConfRecursorReader(fs, dnsServerDomainName)

			fs.WriteFile("/etc/resolv.conf", []byte(fmt.Sprintf(`
# Generated by dhcpcd from eth0.dhcp
# /etc/resolv.conf.head can replace this line
domain sf.pivotallabs.com
search sf.pivotallabs.com pivotallabs.com
nameserver %s
nameserver %s
# /etc/resolv.conf.tail can replace this line
			`, dnsServerDomainName, loopbackAddress)))
		})

		It("returns an empty array", func() {
			recursors, err := resolvConfRecursorReader.Get()

			Expect(err).ToNot(HaveOccurred())
			Expect(recursors).To(HaveLen(0))
		})
	})

	Context("When resolv.conf has multiple recursors", func() {
		BeforeEach(func() {
			fs = boshsysfakes.NewFakeFileSystem()
			resolvConfRecursorReader = NewResolvConfRecursorReader(fs, dnsServerDomainName)

			fs.WriteFile("/etc/resolv.conf", []byte(fmt.Sprintf(`
# Generated by dhcpcd from eth0.dhcp
# /etc/resolv.conf.head can replace this line
domain sf.pivotallabs.com
search sf.pivotallabs.com pivotallabs.com
nameserver recursor-1
nameserver %s
nameserver recursor-2
# /etc/resolv.conf.tail can replace this line
			`, dnsServerDomainName)))
		})

		It("returns all entries except the DNS server itself", func() {
			recursors, err := resolvConfRecursorReader.Get()

			Expect(err).ToNot(HaveOccurred())
			Expect(recursors).To(HaveLen(2))
			Expect(recursors).To(ConsistOf("recursor-1:53", "recursor-2:53"))
		})

		Context("When there are malformed entries", func() {
			Context("nameserver is missing a value", func() {
				BeforeEach(func() {
					fs.WriteFile("/etc/resolv.conf", []byte(fmt.Sprintf(`
# Generated by dhcpcd from eth0.dhcp
# /etc/resolv.conf.head can replace this line
domain sf.pivotallabs.com
search sf.pivotallabs.com pivotallabs.com
nameserver %s
nameserver recursor-1
nameserver
# /etc/resolv.conf.tail can replace this line
			`, dnsServerDomainName)))
				})

				It("returns all entries except the DNS server itself", func() {
					recursors, err := resolvConfRecursorReader.Get()

					Expect(err).ToNot(HaveOccurred())
					Expect(recursors).To(HaveLen(1))
					Expect(recursors).To(ConsistOf("recursor-1:53"))
				})

			})

			Context("nameserver entry has spaces or other text before 'nameserver'", func() {
				BeforeEach(func() {
					fs.WriteFile("/etc/resolv.conf", []byte(fmt.Sprintf(`
# Generated by dhcpcd from eth0.dhcp
# /etc/resolv.conf.head can replace this line
domain sf.pivotallabs.com
search sf.pivotallabs.com pivotallabs.com
nameserver %s
 nameserver   recursor-1
nameserver recursor-2
1 nameserver foo
# /etc/resolv.conf.tail can replace this line
			`, dnsServerDomainName)))
				})

				It("returns all entries except the DNS server itself", func() {
					recursors, err := resolvConfRecursorReader.Get()

					Expect(err).ToNot(HaveOccurred())
					Expect(recursors).To(HaveLen(2))
					Expect(recursors).To(ConsistOf("recursor-1:53", "recursor-2:53"))
				})

			})
		})
	})

	Context("When resolv.conf is not readable", func() {
		BeforeEach(func() {
			fs = boshsysfakes.NewFakeFileSystem()
			fs.WriteFile("/etc/resolv.conf", []byte(""))
			fs.RegisterReadFileError("/etc/resolv.conf", errors.New("unable to read /etc/resolv.conf"))
			resolvConfRecursorReader = NewResolvConfRecursorReader(fs, dnsServerDomainName)
		})

		It("returns an error", func() {
			_, err := resolvConfRecursorReader.Get()
			Expect(err).To(HaveOccurred())
			Expect(err.Error()).To(ContainSubstring("attempting to read recursors"))
		})
	})
})
